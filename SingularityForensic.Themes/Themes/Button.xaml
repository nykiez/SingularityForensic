<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:telerik="http://schemas.telerik.com/2008/xaml/presentation"
                    xmlns:metros="http://metro.mahapps.com/winfx/xaml/controls">
    <Style x:Key="SureBtnStyle" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{DynamicResource SureButtonFore}"/>
        <Setter Property="Background" Value="{DynamicResource SureButtonBack}"/>
        <Setter Property="metros:ControlsHelper.ContentCharacterCasing"  Value="Upper"/>
        <Setter Property="metros:ControlsHelper.CornerRadius" Value="0"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="FontSize" Value="14"/>
        <!--<Setter Property="FontFamily" Value="Microsoft YaHei"/>
        <Setter Property="FontWeight" Value="Bold"/>-->
        <Setter Property="MinHeight" Value="24"/>
        <Setter Property="Padding" Value="2,4"/>
        <Setter Property="MinWidth" Value="87"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Border Width="{TemplateBinding Width}" x:Name="Background" CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(metros:ControlsHelper.CornerRadius)}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"  Background="{TemplateBinding Background}" />
                        <!--<Image Stretch="None"  x:Name="DefaultBackground" Source="/CDFCMessageBoxes;component/btnSureIcon.png" />-->
                        <Border x:Name="DisabledVisualElement" Background="{DynamicResource ControlsDisabledBrush}"
                                CornerRadius="{Binding (metros:ControlsHelper.CornerRadius), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                                IsHitTestVisible="False" Opacity="0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        <metros:ContentControlEx x:Name="PART_ContentPresenter" ContentCharacterCasing="{Binding (metros:ControlsHelper.ContentCharacterCasing), RelativeSource={RelativeSource TemplatedParent}}" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="Background" Value="#26628C"/>
                            <!--<Setter Property="Visibility" Value="Collapsed" TargetName="DefaultBackground"/>-->
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <!--<Setter Property="Opacity" TargetName="DisabledVisualElement" Value="0.7"/>-->
                            <Setter Property="Opacity" TargetName="PART_ContentPresenter" Value="0.3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource MessageBoxButtonBorderBrushKey}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="DenyBtnStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource SureBtnStyle}">
        <Setter Property="Background" Value="{DynamicResource DenyButtonBack}"/>
        <Setter Property="Foreground" Value="{DynamicResource DenyButtonFore}"/>
    </Style>

    <!--<Style TargetType="Button" BasedOn="{StaticResource SureBtnStyle}"/>-->
    <SolidColorBrush x:Key="RefreshButtonBorder" Color="#acacac"/>
    <Style x:Key="RefreshBtnStyle" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{DynamicResource SureButtonFore}"/>
        <Setter Property="Background" Value="{DynamicResource SureButtonBack}"/>
        <Setter Property="metros:ControlsHelper.ContentCharacterCasing"  Value="Upper"/>
        <Setter Property="metros:ControlsHelper.CornerRadius" Value="3"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{DynamicResource RefreshButtonBorder}"/>
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFont}"/>
        <Setter Property="FontSize" Value="{DynamicResource UpperCaseContentFontSize}"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="MinHeight" Value="24"/>
        <Setter Property="Padding" Value="2,4"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Border Width="{TemplateBinding Width}" x:Name="Background" Padding="{TemplateBinding Padding}" CornerRadius="1" BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"  Background="{TemplateBinding Background}" />
                        <!--<Image Stretch="None"  x:Name="DefaultBackground" Source="/CDFCMessageBoxes;component/btnSureIcon.png" />-->
                        <Border x:Name="DisabledVisualElement" Background="{DynamicResource ControlsDisabledBrush}"
                                CornerRadius="{Binding (metros:ControlsHelper.CornerRadius), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                                IsHitTestVisible="False" Opacity="0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        <metros:ContentControlEx x:Name="PART_ContentPresenter" ContentCharacterCasing="{Binding (metros:ControlsHelper.ContentCharacterCasing), RelativeSource={RelativeSource TemplatedParent}}" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource MessageBoxButtonBorderBrushKey}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Button" BasedOn="{StaticResource SureBtnStyle}"/>
    <Style TargetType="Button" BasedOn="{StaticResource SureBtnStyle}" x:Key="CeleronBtn" >
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="FontSize" Value="9"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="Foreground" Value="#3f92ef"/>
        <Setter Property="metros:ControlsHelper.CornerRadius" Value="2"/>
        <!--<Setter Property="FontFamily" Value="Microsoft YaHei Light"/>-->
        <Setter Property="Background" Value="#b2d3f9"/>
        <!--<Setter Property="BorderBrush" Value="#3f92ef"/>-->
    </Style>

    <Style TargetType="Button" x:Key="DeActiveBtn" BasedOn="{StaticResource SureBtnStyle}">
        <Setter Property="Background" Value="#fc0029"/>
    </Style>

    <ControlTemplate x:Key="TransparentButtonTempate" TargetType="{x:Type ButtonBase}">
        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Button.IsDefaulted" Value="True">
                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Background" TargetName="border" Value="#FFBCDDEE"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.5"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#FFADB2B5"/>
                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="#FF838383"/>
            </Trigger>
            <!--<Trigger Property="IsPressed" Value="True">
                <Setter Property="Opacity" TargetName="border" Value="0.5"/>
            </Trigger>-->
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="TransparentButton" TargetType="Button">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template" Value="{StaticResource TransparentButtonTempate}"/>
    </Style>

    
</ResourceDictionary>